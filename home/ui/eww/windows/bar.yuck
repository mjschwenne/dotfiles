(defwidget panel_laucher []
  (button
    :onclick "rofi -show run &"
    :class "runner"
    (image 
      :path "${EWW_CONFIG_DIR}/assets/nix_snowflake.png"
      :image-width 30 
      :image-height 30)))

(defwidget panel_power []
  (button 
    :class "power"
    :onclick "wlogout &"
    :valign "center"
    ""))

(defwidget panel_separator [orientation dots visible]
  (box
    :orientation orientation 
    :class "separator"
    :visible visible 
    (for dot in dots 
      (box :class "dot" :halign "center" :hexpand true :valign "center"))))

(defwidget panel_clock []
  (box 
    :space-evenly false 
    :orientation "v"
    (label :class "clock" :text "${formattime(EWW_TIME, '%H')}")
    (panel_separator :orientation "h" :dots "[1, 2]" :visible true)
    (label :class "clock" :text "${formattime(EWW_TIME, '%M')}")))

(defwidget panel_workspaces [orientation]
  (box
    :class "workspaces"
    :space-evenly false 
    :orientation orientation 
    (for workspace in {workspaces}
      (button 
        :class "workspace button ${workspace.windows > 0 ? "occupied" : "empty"} ${workspace.status}"
        :onclick "hyprctl dispatch workspace ${workspace.id}"
        :valign "center"
        (label 
          :class "workspace"
          :text {workspace.status == "focused" ? "" : "${workspace.windows > 0 ? "" : ""}"})))))

(defwidget controls_slider [control reveal value onchange icon orientation transition ?active class]
  (eventbox 
    :onscroll "${EWW_CONFIG_DIR}/scripts/${control} {}"
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box 
      :space-evenly false 
      :orientation orientation 
      (revealer
        :transition transition 
        :duration "300ms"
        :reveal reveal 
        :class "reveal"
        (scale 
          :class "slider ${orientation} ${class}"
          :orientation orientation 
          :flipped {orientation == "v"}
          :value value 
          :active {active?: true}
          :onchange onchange))
      (label 
        :class "${class} icon"
        :text icon))))

(defwidget controls_icon [control reveal value icon style angle orientation transition visible ?padding]
  (eventbox 
    :visible visible 
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box 
      :space-evenly false 
      :orientation orientation 
      :halign "center"
      (revealer 
        :transition transition 
        :duration "300ms"
        :reveal reveal 
        :class "reveal"
        :halign "center"
        (label 
          :class "${style} ${control}"
          :angle angle 
          :limit-width 25
          :text value))
      (label 
        :class "${style} ${control} icon"
        :text icon))))

(defvar bluetooth_reveal false)
(defvar mute_reveal false)
(defvar volume_reveal false)
(defvar brightness_reveal false)
(defvar notifications_reveal false)
(defvar network_reveal false)
(defvar battery_reveal false)
(defwidget panel_controls [orientation]
  (box 
    :class "controls"
    :orientation orientation 
    :space-evenly false 
    :valign "center"
    :halign "center"
    (controls_icon 
      :orientation orientation 
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "notifications"
      :reveal notifications_reveal 
      :visible true 
      :value {notifications.count}
      :icon ""
      :style "on"
      :angle 0)
    (controls_icon 
      :orientation orientation 
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "bluetooth"
      :reveal bluetooth_reveal 
      :visible {bluetooth.state == "on"}
      :value {arraylength(bluetooth.devices) == 0 ? "Not Connected" : bluetooth.devices[0]}
      :icon {bluetooth.icon}
      :style {bluetooth.state}
      :angle {orientation == "v" ? 90 : 0})
    (controls_icon 
      :orientation orientation 
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "mute"
      :reveal mute_reveal
      :visible {volume.mute.state == "on"}
      :value "Muted"
      :icon {volume.mute.icon}
      :style ""
      :angle {orientation == "v" ? 90 : 0})
    (controls_slider 
      :orientation orientation 
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "volume"
      :reveal volume_reveal 
      :value {volume.level}
      :onchange "${EWW_CONFIG_DIR}/scripts/volume set {}"
      :icon {volume.icon}
      :class "volume")
    (controls_slider 
      :orientation orientation 
      :transition {orientation == "v" ? "slideup" : "slideleft"} 
      :control "brightness"
      :reveal brightness_reveal 
      :value {brightness.percentage}
      :onchange "${EWW_CONFIG_DIR}/scripts/brightness set {}"
      :icon {brightness.icon}
      :class "brightness")
    (controls_icon 
      :orientation orientation 
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "network"
      :reveal network_reveal 
      :visible true 
      :value {network.name}
      :icon {network.icon}
      :style {network.state}
      :angle {orientation == "v" ? 90 : 0}
      :padding 50)
    (controls_slider 
      :orientation orientation 
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "battery"
      :reveal battery_reveal 
      :value {battery.percentage}
      :onchange ""
      :active false
      :class "${battery.class}"
      :icon {battery.icon})))

(defwidget bar []
  (centerbox
    :orientation "v"
    (box
      :orientation "v"
      :space-evenly false
      :valign "start"
      (panel_laucher)
      (panel_workspaces
        :orientation "v"))
    (box
      :orientation "v"
      :space-evenly false
      :valign "center"
      (panel_clock))
    (box 
      :orientation "v"
      :space-evenly false
      :valign "end"
      (panel_controls
        :orientation "v")
      (panel_power))))

(defwindow primary_panel
  :monitor 0
  :exclusive true 
  :focusable false 
  :stacking "bg"
  :geometry (geometry
              :x "1%"
              :y "50%"
              :width "2%"
              :height "98%"
              :anchor "center left")
  (bar))

(defwindow secondary_panel
  :monitor 1
  :exclusive true 
  :focusable false 
  :stacking "bg"
  :geometry (geometry
              :x "1%"
              :y "50%"
              :width "2%"
              :height "98%"
              :anchor "center right")
  (bar))
