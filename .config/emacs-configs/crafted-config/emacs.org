#+title: Emacs Configuration
#+property: header-args:emacs-lisp :tangle config.el

* Objectives
I am interested in integrating Emacs into my workflow, but only in a very
specific manner. I what the ultimate note taking application. Until now, I've
been a happy user of Obsidian which is a phenomenal application that I recommend
to a lot of people and will continue to do so. The UI is polished and the plugin
community is incredibly active and wonderful. So, if all of that is true, why am
I interested in switching to Emacs? Well, there are a few reasons.

1. Emacs is open source. I've been getting more and more involved with the open
   source community and this is important to me. While Obsidian keeps all of my
   notes locally in a markdown variant for which I could use another markdown
   editor, I feel like most of the functionally that I depend on wouldn't be
   available in another markdown editor. Obsidian itself is closed source and
   developed by a very small team. I don't think that they would start charging
   for the application themselves, but it is possible that they get bought out
   and then who knows what will happen.
2. Emacs has better vim emulation. As a computer science student who programs
   basically everything in vim (or neovim on my personal machines) I have come
   to appreciate and enjoy vim and vim-like keybindings. They are fast,
   convenient and keep my hands on the keyboard without needing to move then to
   a mouse or touchpad. This is important when I'm taking notes at high-speed
   during a lecture. Interestingly, Obsidian does have native vim keybinding
   which I did try for a while but it was difficult to configure them and I
   wasn't able to figure out how to access and navigate every part of the
   application.
3. Emacs isn't an electron app. It's not really that I have anything against
   electron per say, it's a great way to have multi-platform application with
   easy development and consistent UI. However, there are plugins for Obsidian
   which let you write advanced data queries and stuff which I like to try to
   use (more so with Pathfinder / D&D stuff than regular notes) but they have to
   be written in JavaScript since of course, Obsidian is an electron
   application. I /really/ dislike JavaScript and I've literally never had a good
   experience writting it. As weird is at might seem, I'd much rather write
   Emacs Lisp than JavaScript. Like JavaScript, Emacs Lisp is a full programming
   language which means that I have the option to develop code as complex as I
   need.
4. Emacs is more monolithic. Which options to do things like integrate Obsidian
   with Zotero exist, they aren't great and several of the plugins aren't
   maintained or buggy. Emacs packages can be used to not exactly replace Zotero
   (since the Zotero browser extension is awesome) but they do support
   annotating PDFs in org mode and after an article is annotated exporting all
   of the annotations to a permanent org file which can then be linked to from
   my other notes, facilitating a much closer integration between academic
   papers and my notes which is important for somebody wanting to pursue
   research as a career.
5. Org mode has built-in task management. I'm normally fairly good at task
   management, but only when I'm in an already structured environment like
   classes during a semester. A simple list of upcoming assignments as generally
   all that I need and I will just remember to do things. However, during more
   unstructured environments like the summer work research work I've been doing
   for the last two summers, I can have a tendency to get distracted or explore
   only tangentially related topics. I think this will be great in an even more
   unstructured environment, but there are things that need to be done not by next
   Thursday but by the end of the summer. I have to be able to create and manage
   TODO items myself and while I have used the tasks plugin for Obsidian, it is
   a first-class feature in org mode and doesn't use weird emoji to denote
   things.

Given all of these reasons, I have decided to try to give Emacs the best
possible chance as a notetaking application. That being said, their are some
things that I am given up by doing this.

1. While their are so many Emacs packages up there, not all of the functionally
   that I used in Obsidian has a corresponding Emacs package. The biggest one
   that comes to mind is the Fantasy Calendar plugin which is /fantastic/ for
   planning my Pathfinder game. There is also minor features like sliding panes
   which are critical to how I use Obsidian but some good buffer management in
   Emacs should mitigate that. Some features I don't think that I can replace at
   all, like centering images and tables which is a small visual change that I
   happen to like a lot.
2. It's more work. Obsidian has a lot of out-of-the-box functionally that is
   possible to re-create in Emacs but it requires a lot of work (which is what
   this configuration presents). I have to configure things like spell check
   (which is critical to me), "live-preview" and "reading" mode using things like
   =org-appear=, etc. This is possibly a strength of a well-put together Emacs
   config since I can change and tweak everything that I want to, but the front
   effort is many, many times more than what I've invested in configuring Obsidian.
3. I am also not an expert in Emacs lisp. I've watched a YouTube series about it
   and we actually learned a lisp variant called Scheme in my programming
   languages class so a lot of the concepts are familiar to me, but a truly
   function programming language requires a different mindset to work with than
   a declarative one.

To address this last point, I've done two things. First, I tried DOOM Emacs
which is a pre-configured Emacs distribution that includes a lot out of the box.
However, I found that it included too much functionally that I wasn't using and
had no plans on using. I then tried to switch to a custom configuration (so yes,
this is actually my second attempt at this project) and realized just how much
DOOM was doing that I didn't realize. So then I configured Chemacs 2 which lets
me hold both configurations and actually lets me run multiple windows of Emacs
using different configurations at the same time. Now I can use DOOM Emacs as a
fall back and explore it's functionality while working on this configuration.

Additionally, this configuration is based off of [[https://github.com/SystemCrafters/crafted-emacs][Crafted Emacs]] which is a very
minimal config spearheaded by the SystemCrafters YouTube channel. This gives me
the ability to take advantage of a base system which is has some utilities
already configured while since being able to learn more about Emacs and Emacs
Lisp. Since I am /only/ interested in Emacs as a note taking solution at the
moment (I will continue to use neovim and vim for all of my programming needs) I
have spend a lot of time on exactly two major modes, the only two that I need
for this project: Emacs Lisp Mode and Org Mode.

Enough of me rambling, lets start configuring! Org mode text is used to describe
why I'm doing things and Comments in the source blocks to describe how I'm doing
it as needed.

* Global Emacs Configuration

Controls many of the UI elements and global modes like Evil, etc.

** Crafted Emacs Basics

Turn on a bunch of the Crafted Emacs modules.

#+begin_src emacs-lisp
(require 'crafted-defaults)    ; Sensible default settings for Emacs
(require 'crafted-compile)
(require 'crafted-updates)     ; Tools to upgrade Crafted Emacs
(require 'crafted-completion)  ; selection framework based on `vertico`
(require 'crafted-ui)          ; Better UI experience (modeline etc.)
(require 'crafted-windows)     ; Window management configuration
(require 'crafted-editing)     ; Whitspace trimming, auto parens etc.
(require 'crafted-evil)        ; An `evil-mode` configuration
(require 'crafted-org)         ; org mode, the reason I'm doing any of this.
#+end_src

** User Interface Visuals

*** Theme
My desktop uses the awesome Catppuccin color scheme, which happens to have an
Emacs color scheme package on MELPA. This should actually go into
=early-config.el= so that even the first frame always have this information
correct.

#+begin_src emacs-lisp :tangle early-config.el
(customize-set-variable 'crafted-startup-inhibit-splash nil)

;; Set transparency
(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+end_src

Now, apparently =load-theme= struggles to find MELPA / ELPA themes during early
initialization, so this block is still in the regular configuration.

#+begin_src emacs-lisp
  (load-theme 'catppuccin t)
#+end_src

A cool todo would be to support =solaire-mode= which slightly changes the background
of some buffers (like pop-ups or file explorers) to be a slightly different color.
Sadly the current Catppuccin theme doesn't support this (yet?).

*** Fonts

Despite no longer using any JetBrains products, I am a big fan of their font and
use the JetBrainsMono Nerd Font for like everything.

#+begin_src emacs-lisp
(customize-set-variable 'crafted-ui-default-font '(:font "JetBrainsMono Nerd Font" :weight light))
#+end_src

*** Windows

So DOOM Emacs as a custom built popup mode which is designed to manage temporary
windows like help, shells, etc. Instead of ripping that out (or using the work
that somebody else did to rip it out), I'm going to replace it with [[https://github.com/karthink/popper][popper]]. For
the moment I'm using the default keybindings until I figure out exactly how and
what this can do.

#+begin_src emacs-lisp
(crafted-package-install-package 'popper)
(crafted-package-install-package popper
  :bind (("C-`" . popper-toggle-latest)
         ("M-`" . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init (setq popper-reference-buffers
              '("\\*Messages\\*"
                "Output\\*$"
                "\\*Async Shell Command\\*"
                "\\*helpful"
                help-mode
                compilation-mode))
  :config (popper-mode +1))
#+end_src

*** Highlight Line & Others

This is a feature that I don't normally use, and probably wouldn't without it coming
as the default for DOOM Emacs: highlighting the current line. I'm still a bit on the
fence about it, but for the moment I'm going to turn it on.

#+begin_src emacs-lisp
      (global-hl-line-mode +1)
#+end_src

Also, there are two other small packages to help with highlighting various things,
=highlight-numbers= and =highlight-quoted= which are configured below.

#+begin_src emacs-lisp
          (crafted-package-install-package 'highlight-numbers)
  (crafted-package-install-package highlight-numbers
    :hook ((prog-mode conf-mode) . highlight-numbers-mode)
    :config (setq highlight-numbers-generic-regexp "\\_<[[:digit:]]+\\(?:\\.[0-9]*\\)?\\_>"))

#+end_src

*** Modeline

This is based off of the DOOM modeline configuration provided by Crafted Emacs.

#+begin_src emacs-lisp
  (column-number-mode +1)   ; yes to column numbers in the modeline
  (size-indication-mode +1) ; Show total buffer size in the modeline
(customize-set-variable 'doom-modeline-minor-modes nil)
#+end_src

*** Other

I /hate/ the visible bell for honestly petty reasons. I think it looks bad and if I
want to scroll down from the bottom of a buffer, Emacs is going to sit their and
let me. Also, turn on some minor things like line numbers.

#+begin_src emacs-lisp
  (custom-set-variables '(visible-bell nil)                   ; no to visible bell
                        '(crafted-ui-display-line-numbers t)) ; yes to line numbers
  (crafted-package-install-package 'vi-tilde-fringe)
  (crafted-package-install-package vi-tilde-fringe
    :config (global-vi-tilde-fringe-mode +1))
#+end_src

** (Evil) Keybindings
Vim is great, so naturally =evil-mode= is a requirement!

#+begin_src emacs-lisp
(require 'crafted-evil)

(custom-set-variables
 '(crafted-windows-evil-style t)                        ; Evil bindings for window management
 '(crafted-evil-discourage-arrow-keys t))               ; Have to use HJKL
(global-set-key (kbd "<escape>") 'keyboard-esacpe-quit) ; ESC exits all prompts
#+end_src

Next up is a sequence of evil helper packages:
- [[https://github.com/hlissner/evil-snipe][evil-snipe]], a package with enables quick searching for targets with two
  character motions.
- [[https://github.com/syl20bnr/evil-escape][evil-esacpe]], a package to escape to normal mode without pressing ~<escape>~.
- [[https://github.com/edkolev/evil-goggles][evil-goggles]], a package to highlight regions during selection, like ~2yy~.
- [[https://github.com/emacs-evil/evil-surround][evil-surround]], a package to surround text with delimiters.
- [[https://github.com/mamapanda/evil-traces][evil-traces]], a package to preview things like substitutions.

#+begin_src emacs-lisp
  (crafted-package-install-package 'evil-snipe)
  (crafted-package-install-package evil-snipe
    :config (evil-snipe-mode +1)
            (evil-snipe-override-mode +1))

  (crafted-package-install-package 'evil-escape)
  (crafted-package-install-package evil-escape
    :config (evil-escape-mode +1))

  (crafted-package-install-package 'evil-goggles)
  (crafted-package-install-package evil-goggles
    :config (evil-goggles-mode +1))

  (crafted-package-install-package 'evil-surround)
  (crafted-package-install-package evil-surround
    :config (global-evil-surround-mode +1))

  (crafted-package-install-package 'evil-traces)
  (crafted-package-install-package evil-traces
    :config (evil-traces-use-diff-faces)
    (evil-traces-mode))
#+end_src

The =better-jumper= package is not dependent on =evil=, but can integrate with it
for better jump control and history tracking.

#+begin_src emacs-lisp
(crafted-package-install-package 'better-jumper)
(crafted-package-install-package better-jumper
  :config (better-jumper-mode +1))
#+end_src

** Workflow

The =undo-fu= package simplifies Emacs' undo and redo functionally, which seems not all that
simple at first. There is another package called =undo-fu-session= which preserves undo information
across sessions. However, I have not installed it since I don't think it overly useful.

#+begin_src emacs-lisp
  (crafted-package-install-package 'undo-fu)
(customize-set-variable 'evil-undo-system 'undo-fu)
#+end_src

Another small behavioral tweak is to re-open files at the last location where I was using them.
This can be enabled with =save-place-mode=.

#+begin_src emacs-lisp
(save-place-mode +1)
#+end_src

While you might think that I'd be most interested in a mode called =smartparens= in Emacs lisp
mode (and you'd be correct), this mode provides a general layer of parentheses and other paired
operator control which makes it useful in a global sense. Also, the whitespace butler is an
awesome package designed to clean whitespace without you noticing on file save from only lines
you modified.

#+begin_src emacs-lisp
        (crafted-package-install-package 'smartparens)
      (crafted-package-install-package smartparens
        :config (smartparens-global-mode +1))
    (crafted-package-install-package 'ws-butler)
  (crafted-package-install-package ws-butler
    :config (ws-butler-global-mode +1))
#+end_src

Finally, =which-key= is a must. It visually displays information about what things are mapped to
what keys.

#+begin_src emacs-lisp
    (crafted-package-install-package 'which-key)
  (crafted-package-install-package which-key
    :config (which-key-mode +1))
#+end_src

** Completions

*** Company

I will continue to use =vertico=, =marginalia=, =embark=, etc from from Crafted
Emacs but also use =company= for global completion.

#+begin_src emacs-lisp
  (crafted-package-install-package 'company)
  (crafted-package-install-package company
    );:config (global-company-mode))
#+end_src

*** Flycheck

This package is a syntax checker. Also use =flycheck-popup-tip= to convert
flycheck suggestions into a pop-up.

#+begin_src emacs-lisp
  (crafted-package-install-package 'flycheck)
  (crafted-package-install-package flycheck
    :config (global-flycheck-mode))
  (crafted-package-install-package 'flycheck-popup-tip)
  ;; I can't seem to get this one to work with crafted-package-install-package
  (crafted-package-install-package flycheck-popup-tip
    :after flycheck
    :hook (flycheck-mode . flycheck-popup-tip-mode))
#+end_src

** Performance

This is taken directly from DOOM. I'm not wholly sure what the magic hack is,
but it sounds promising.

#+begin_src emacs-lisp
(crafted-package-install-package 'gcmh)
(crafted-package-install-package gcmh
  :config (gcmh-mode +1))
#+end_src

* Emacs Lisp Mode

Obviously some configuration of Emacs Lisp mode is required to maintain and
quickly work with elisp. DOOM Emacs has 80 minor modes enabled and I'm sure a
whole bunch of things that I haven't even noticed yet.

#+begin_src emacs-lisp
      (crafted-package-install-package 'highlight-quoted)
    (crafted-package-install-package highlight-quoted
      :hook (emacs-lisp-mode . highlight-quoted-mode))
#+end_src

Org-mode handles highlighting org TODO tasks, but the =hl-todo= package will
highlight the below strings in programming mode buffers like most other editors.

#+begin_src emacs-lisp
    (crafted-package-install-package 'hl-todo)
  (crafted-package-install-package hl-todo
    :init (setq hl-todo-keyword-faces
                '(("TODO" . "#F9E2AF")
                  ("DEBUG" . "#F38BA8")
                  ("STUB" . "#CBA6F7")))
    :hook (prog-mode . hl-todo-mode))
#+end_src

=outline-minor-mode= facilitates the folding of elisp based on comment levels. Single
and double =;;= don't mean anything but a triple comment is a first level heading and
the move down from there. I still need to set keybinds for this.

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
#+end_src

Pretty symbols are great, right? Well check out this built-in minor mode!

#+begin_src emacs-lisp
(add-hook 'prog-mode 'prettify-symbols-mode)
#+end_src

Emacs lisp (well, this is really just a lisp thing) has a /lot/ of parentheses and it is
easy to lose track of them. Introducing =rainbow-delimiters= to try to fix all of that!

#+begin_src emacs-lisp
    (crafted-package-install-package 'rainbow-delimiters)
  (crafted-package-install-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Org Mode

DOOM Emacs (with my minimal configuration on top of it) has 85 minor modes.

** Org Basics

#+begin_src emacs-lisp
  (require 'crafted-org)
#+end_src

*** Spelling

Look, speelling is hard. Sometimes really hard, so if I can get the computer
to help me with it, I will. Use the built-in =flyspell= package with
=flyspell-correct= for a better completion interface and =flyspell-lazy=
to reduce system load.

#+begin_src emacs-lisp
  (crafted-package-install-package 'flyspell-lazy)
  (crafted-package-install-package flyspell-lazy
    :demand t
    :hook (org-mode . (lambda ()
                        (flyspell-mode +1)
                        (flyspell-buffer)))
    :config (flyspell-lazy-mode +1))
  (crafted-package-install-package 'flyspell-correct)
  (crafted-package-install-package flyspell-correct
    :after flyspell
    :bind ([remap ispell-word] . flyspell-correct-at-point))
#+end_src

*** Fix the weird shit

This is taken directly from DOOM Emacs.

#+begin_src emacs-lisp
  (defun +org-fix-newline-and-indent-in-src-blocks (&optional indent arg interactive)
    (when (and org-src-tab-acts-natively
               (org-in-src-block-p t))
      (save-window-excursion
        (org-babel-do-in-edit-buffer
         (call-interactively #'indent-for-tab-command)))))
  (advice-add 'org-return :after #'+org-fix-newline-and-indent-in-src-blocks)
#+end_src

#+begin_src python
  def helloWorld():
      print("Hello, World!")

#+end_src
